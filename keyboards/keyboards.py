from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

from utils.utils import formatted_users_list, __toggle_btn, __toggle_main_recipients_btn
from utils.request import request_status_str
from data.config import STATUS, CONFIG
from aiogram.utils.markdown import hlink

intro_admin_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('üë®‚Äçüíª –£—á–∞—Å—Ç–Ω–∏–∫'),
    KeyboardButton('üè¥‚Äç‚ò†Ô∏è –ê–¥–º–∏–Ω')
).add(
    KeyboardButton('üèÜüìà –¢–æ–ø—ã')
)

intro_member_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('üë®‚Äçüíª –£—á–∞—Å—Ç–Ω–∏–∫')
).add(
    KeyboardButton('üèÜüìà –¢–æ–ø—ã'),
)

member_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('üìù –ó–∞–ø—Ä–æ—Å'),
    KeyboardButton('üì© –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å')
).add(
    KeyboardButton('‚úèÔ∏è –†–µ–¥. –∑–∞–ø—Ä–æ—Å'),
    KeyboardButton('‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ —Ü–µ–ª–∏')
).add(
    KeyboardButton('üè† –í—ã–π—Ç–∏')
)

admin_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞'),
    KeyboardButton('‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞')
).add(
    KeyboardButton('üìä –ë–∞–ª–ª—ã'),
    KeyboardButton('üëë –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
).add(
    KeyboardButton('‚õîüë®‚Äçüíª –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞'),
    KeyboardButton('‚õîüìù –£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å')
).add(
    KeyboardButton('üè† –í—ã–π—Ç–∏'),
    KeyboardButton('‚Ü™Ô∏è –ö–∞–Ω–∞–ª—ã')
).add(
    KeyboardButton('‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ‚ùå')
)

points_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('üìä –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã'),
    KeyboardButton('üö´ –û—Ç–Ω—è—Ç—å –±–∞–ª–ª—ã')
).add(
    KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
)

channels_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text='üìù –ó–∞–ø—Ä–æ—Å—ã', callback_data='edit_request_channel')
).add(
    InlineKeyboardButton(text='üì© –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', callback_data='edit_report_channel')
).add(
    InlineKeyboardButton(text='‚úÖ –¶–µ–ª–∏', callback_data='edit_goals_channel')
).add(
    InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')
)

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('üè†–í—ã–π—Ç–∏')
)

prev_step_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')
)
prev_step_reply_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
)

approve_promotion_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text='–î–∞', callback_data='approve_prom'),
    InlineKeyboardButton(text='–ù–µ—Ç', callback_data='refuse_prom')
)

approve_removing_request_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='approve_rem_req'),
    InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_rem_req')
)


async def remove_member_kb(curr_users: list, member_index=None):
    buttons_list = []
    formatted_users = formatted_users_list(curr_users)
    for i in range(len(formatted_users)):
        if i == member_index:
            formatted_users[i] = formatted_users[i] + 'üî¥'
        buttons_list.append([InlineKeyboardButton(text=formatted_users[i], callback_data=f'rm_user_{i}')])
    buttons_list.append([InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', callback_data='approve_remove')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


async def select_member_to_edit_status_kb(curr_users: list, member_index=None):
    buttons_list = []
    formatted_users = formatted_users_list(curr_users)
    for i in range(len(formatted_users)):
        if i == member_index:
            formatted_users[i] = formatted_users[i] + 'üî¥'
        buttons_list.append([InlineKeyboardButton(text=formatted_users[i], callback_data=f'user_{i}')])
    buttons_list.append([InlineKeyboardButton(text='–î–∞–ª–µ–µ ‚è©', callback_data='next_step')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


async def update_addressers_kb(curr_users: list, marked_members: list = None, cols=5):
    buttons_list = []
    button_row = []
    for i in range(len(curr_users)):
        btn_text = f'üî¥{i + 1}'
        if marked_members:
            if i in marked_members:
                button_row.append(InlineKeyboardButton(text=__toggle_btn(btn_text), callback_data=f'user_{i}'))
            else:
                button_row.append(InlineKeyboardButton(text=btn_text, callback_data=f'user_{i}'))
        else:
            button_row.append(InlineKeyboardButton(text=btn_text, callback_data=f'user_{i}'))
        if (i != 0 and i % (cols - 1) == 0) or i == len(curr_users) - 1:
            buttons_list.append(button_row)
            button_row = []
    buttons_list.append([InlineKeyboardButton(text='–î–∞–ª–µ–µ‚è©', callback_data='next_step')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


async def update_recipients_kb(curr_users: list, user_indices: list = None, cols=5):
    buttons_list = []
    button_row = []
    for i in range(len(curr_users)):
        btn_text = f'üî¥{i + 1}'
        if user_indices:
            if i in user_indices:
                if user_indices[0] == i:
                    button_row.append(InlineKeyboardButton(text=__toggle_main_recipients_btn(btn_text),
                                                           callback_data=f'user_{i}'))
                else:
                    button_row.append(InlineKeyboardButton(text=__toggle_btn(btn_text), callback_data=f'user_{i}'))

            else:
                button_row.append(InlineKeyboardButton(text=btn_text, callback_data=f'user_{i}'))
        else:
            button_row.append(InlineKeyboardButton(text=btn_text, callback_data=f'user_{i}'))
        if (i != 0 and i % (cols - 1) == 0) or i == len(curr_users) - 1:
            buttons_list.append(button_row)
            button_row = []
    buttons_list.append([InlineKeyboardButton(text='–î–∞–ª–µ–µ‚è©', callback_data='next_step')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


async def update_users_to_update_points(curr_users: list, marked_members_indices: list = None):
    buttons_list = []
    formatted_users = formatted_users_list(curr_users)
    for i in range(len(formatted_users)):
        if marked_members_indices and i in marked_members_indices:
            formatted_users[i] += 'üî¥'
        buttons_list.append([InlineKeyboardButton(text=formatted_users[i], callback_data=f'user_{i}')])
    buttons_list.append([InlineKeyboardButton(text='–î–∞–ª–µ–µ‚è©', callback_data='next_step')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


def __list_of_elements_kb(elements: list):
    buttons_list = []
    for i, elm in enumerate(elements):
        buttons_list.append([InlineKeyboardButton(text=elm, callback_data=f'elm_{i}')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


async def users_requests_kb(requests: list):
    requests_ids = [f'–ó–∞–ø—Ä–æ—Å #{req[0]} {request_status_str(req[2])[0]}' for req in requests]
    return __list_of_elements_kb(requests_ids)


async def request_headers_kb():
    headers = ['–°—Ç–∞—Ç—É—Å', '–û—Ç –∫–æ–≥–æ', '–ö–æ–º—É', '–ó–∞–ø—Ä–æ—Å', '–°—Ä–æ–∫']
    return __list_of_elements_kb(headers)


async def request_status_kb():
    statuses = ['‚ùå ‚Äî –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 'üîÑ ‚Äî –í –ø—Ä–æ—Ü–µ—Å—Å–µ', '‚úÖ ‚Äî –í—ã–ø–æ–ª–Ω–µ–Ω–æ']
    return __list_of_elements_kb(statuses)


async def user_status_kb():
    statuses = [f"{STATUS[key]['icon']} - {STATUS[key]['value']}" for key in STATUS.keys()]
    return __list_of_elements_kb(statuses)


def apply_tasks_kb():
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='apply_tasks'),
        InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')
    )
    return keyboard


async def member_reports_kb(reports: list):
    reports_ids = [f'–û—Ç—á—ë—Ç #{req[0]}' for req in reports]
    return __list_of_elements_kb(reports_ids)

#
# async def report_headers_kb():
#     headers = [
#         '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ üí∞',
#         '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚úÖ',
#         '–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚ùå',
#         '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìù'
#     ]
#     return __list_of_elements_kb(headers)

permission_denied_message = f'–ü—Ä–∏–≤–µ—Ç! –†–∞–¥, —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏!\n\n' \
                            f'–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ <b>¬´–ù–µ–ª—å–∑—è, –ù–æ –ú–æ–∂–Ω–æ¬ª</b> –∏ –∑–¥–µ—Å—å —Ç—ã —Ç–æ—á–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π! üöÄ\n\n' \
                            f'–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è—Ç—å –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã:\n\n' \
                            f'ü§ñ {hlink("–ë–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "https://t.me/nobutyesteam_bot")} ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ü–µ–ª–∏, —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–≤–æ–µ–π –∏ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' \
                            f'üí¨ {hlink("–û–±—â–∏–π —á–∞—Ç", "https://t.me/+1tq1Vrx7chNkNGQy")} ‚Äî –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n' \
                            f'üìù {hlink("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", "https://t.me/+bHfggUwLTfQzZTUy")} ‚Äî –∑–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π\n' \
                            f'üìù {hlink("–û—Ç—á–µ—Ç—ã", "https://t.me/+_fm9utI7EW82OWJi")} ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü\n' \
                            f'üéØ {hlink("–ó–∞–∫—Ä—ã—Ç—ã–µ —Ü–µ–ª–∏", "https://t.me/+IOhfgXR3dcEzODli")} ‚Äî –∑–¥–µ—Å—å –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ü–µ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' \
                            f'‚öôÔ∏è {hlink("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "https://t.me/+dei2b--LBsJhMmIy")} ‚Äî —Ç—É—Ç –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ñ–æ–±–∏–∑–∞ —Ç–∞–±–ª–∏—Ü—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—É—á–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π \n' \
                            f'üìù {hlink("–ó–∞–ø—Ä–æ—Å—ã", "https://t.me/+SgHj8E-IpHMxZWUy")} ‚Äî –æ—Å—Ç–∞–≤–ª—è–π –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n\n' \
                            f'‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –æ–±—ä–µ–¥–∏–Ω–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –≤ –æ–¥–Ω—É –ø–∞–ø–∫—É, —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ —É–¥–æ–±–Ω–æ. –ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å ‚Äî {hlink("—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", "https://drive.google.com/file/d/1kyGfO5XPBReBcARjKgBGZK9lnOHOTQaD/view?usp=drive_link")} ‚ùóÔ∏è'


check_subscribes_kb = InlineKeyboardMarkup().add(
   InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data='check_subscribes')
)


def scheduled_tasks_kb(tasks: list, marked_tasks_indices: list = None):
    buttons_list = []

    formatted_tasks = [tasks[i][2] for i in range(len(tasks))]

    for i in range(len(formatted_tasks)):
        if marked_tasks_indices and i in marked_tasks_indices:
            formatted_tasks[i] = 'üü¢ ' + formatted_tasks[i]
        buttons_list.append([InlineKeyboardButton(text=formatted_tasks[i], callback_data=f'task_{i}')])
    buttons_list.append([InlineKeyboardButton(text='–î–∞–ª–µ–µ‚è©', callback_data='next_step')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


def hashtag_kb(marked_indices: list = None):
    buttons_list = []
    button_row = []
    hashtag_names = [hashtag['name'] for hashtag in CONFIG['hashtags']]

    for i in range(len(hashtag_names)):
        if marked_indices and i in marked_indices:
            hashtag_names[i] = 'üü¢ ' + hashtag_names[i]
        button_row.append(InlineKeyboardButton(text=hashtag_names[i], callback_data=f'task_{i}'))
        if (i % 2 != 0) or (i == len(hashtag_names) - 1):
            buttons_list.append(button_row)
            button_row = []
    buttons_list.append([InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='next_step')])
    buttons_list.append([InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')])
    return InlineKeyboardMarkup(inline_keyboard=buttons_list)


edit_request_status_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥', callback_data='skip'),
    InlineKeyboardButton(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='prev_step')
)
