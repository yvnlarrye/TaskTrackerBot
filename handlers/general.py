from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from data.config import PASS, STATUS
from dispatcher import dp
from states import SessionRole, UserEdition
from utils.utils import is_admin
from handlers.admin import admin_start
from handlers.member import member_start
from data import sqlite_db
from keyboards import keyboards as kb
from utils.utils import delete_prev_message


@dp.message_handler(commands=['start'], state='*')
async def start(msg: Message, state: FSMContext):
    await state.finish()
    if await sqlite_db.user_exists(msg.from_id):
        if await is_admin(msg.from_id):
            keyboard = kb.intro_admin_kb
        else:
            keyboard = kb.intro_member_kb
        m = await msg.answer('–í—ã–±–µ—Ä–∏, –∑–∞ –∫–æ–≥–æ –∑–∞–π—Ç–∏:',
                             reply_markup=keyboard)
        await state.update_data(msg=m)
    else:
        await msg.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞.')
    await msg.delete()


@dp.message_handler(commands=['logout'], state='*')
async def logout(msg: Message, state: FSMContext):
    if await is_admin(msg.from_id):
        user_id = await sqlite_db.get_user_id(msg.from_id)
        await sqlite_db.update_user_role(user_id, 0)
        await msg.answer('–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        await start(msg, state)
    else:
        await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.')


@dp.message_handler(commands=['admin'], state='*')
async def admin(msg: Message, state: FSMContext):
    parts = msg.text.split()
    if len(parts) == 2:
        if parts[1] == PASS:
            if await sqlite_db.user_exists(msg.from_id):
                user_id = await sqlite_db.get_user_id(msg.from_id)
                await sqlite_db.update_user_role(user_id, 1)
                await msg.answer('–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
                await start(msg, state)
            else:
                await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤')
                await UserEdition.new_admin_name.set()


@dp.message_handler(text='üë®‚Äçüíª –£—á–∞—Å—Ç–Ω–∏–∫')
async def login_as_member(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    if await sqlite_db.user_exists(msg.from_id):
        await member_start(msg, state)
    else:
        await msg.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞.')
    await msg.delete()


@dp.message_handler(text='‚ò†Ô∏è –ê–¥–º–∏–Ω')
async def login_as_admin(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    if await sqlite_db.user_exists(msg.from_id):
        if await is_admin(msg.from_id):
            await admin_start(msg, state)
        else:
            await msg.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    else:
        await msg.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞.')
    await msg.delete()


@dp.message_handler(text='üè† –í—ã–π—Ç–∏', state='*')
async def back_to_main_menu(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    await start(msg, state)


@dp.message_handler(text='üèÜüìà –¢–æ–ø—ã', state='*')
async def week_rating(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    members = reversed(await sqlite_db.get_users_sorted_by_points())
    result_list = []
    for member in members:
        result_list.append(f"{STATUS[str(member[7]).lower()]['icon']} {member[5]} {member[4]} @{member[3]} ‚Äî üéØ{member[6]}")
    result = '\n'.join(result_list)
    await msg.answer('<b>–ò–º—è ‚Äî –ë–∞–ª–ª—ã:</b>\n' + result,
                     reply_markup=kb.prev_step_reply_kb)
    await SessionRole.general.set()


@dp.message_handler(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', state=SessionRole.general)
async def back_to_admin_menu(msg: Message, state: FSMContext):
    await start(msg, state)
