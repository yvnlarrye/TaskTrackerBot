from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.exceptions import BotKicked

from data.config import PASS
from dispatcher import dp
from keyboards.keyboards import permission_denied_message
from states import SessionRole
from utils.tasks import *
from utils.utils import is_admin, get_status_icon
from handlers.admin import admin_start
from handlers.member import member_start
from data import sqlite_db
from keyboards import keyboards as kb
from utils.utils import delete_prev_message, get_user_earned_total_amount
from dispatcher import bot
from data.config import CONFIG

# from utils import tasks


# @dp.message_handler(text='daily')
# async def daily(msg: Message):
#     await tasks.send_daily_report()
#
# @dp.message_handler(text='weekly')
# async def weekly(msg: Message):
#     await tasks.send_weekly_report()


async def is_user_joined_all_chats(user_id: int):

    check = CONFIG['check_subscribes']

    if not check:
        return True

    for chat_id in CONFIG['channels'].values():
        user_channel_status = await bot.get_chat_member(user_id=user_id, chat_id=chat_id)
        if user_channel_status['status'] == 'left':
            return False
    return True


async def send_permission_denied_message(to_user_id: int):
    await bot.send_message(chat_id=to_user_id,
                           text=permission_denied_message,
                           reply_markup=kb.check_subscribes_kb)


@dp.callback_query_handler(text='check_subscribes', state='*')
async def check_subscribes(cb: CallbackQuery, state: FSMContext):
    await cb.message.delete()
    if await is_user_joined_all_chats(cb.from_user.id):
        await access_layer(cb.from_user.id, state)
    else:
        await send_permission_denied_message(to_user_id=cb.from_user.id)


async def access_layer(user_id: int, state: FSMContext):
    try:
        if await is_user_joined_all_chats(user_id):
            if await sqlite_db.user_exists(user_id):
                if await is_admin(user_id):
                    keyboard = kb.intro_admin_kb
                else:
                    keyboard = kb.intro_member_kb
                m = await bot.send_message(chat_id=user_id,
                                           text='–í—ã–±–µ—Ä–∏, –∑–∞ –∫–æ–≥–æ –∑–∞–π—Ç–∏:',
                                           reply_markup=keyboard)
                await state.update_data(msg=m)
            else:
                await bot.send_message(chat_id=user_id,
                                       text='üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        else:
            await send_permission_denied_message(to_user_id=user_id)
    except (ChatNotFound, BotKicked):
        await bot.send_message(chat_id=user_id,
                               text='–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤–æ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.')


@dp.message_handler(commands=['start'], state='*')
async def start(msg: Message, state: FSMContext):
    await state.reset_state()
    await access_layer(msg.from_id, state)
    await msg.delete()


@dp.message_handler(commands=['logout'], state='*')
async def logout(msg: Message, state: FSMContext):
    if await is_user_joined_all_chats(msg.from_id):
        if await is_admin(msg.from_id):
            user_id = await sqlite_db.get_user_id(msg.from_id)
            await sqlite_db.update_user_role(user_id, 0)
            await msg.answer('–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
            await start(msg, state)
        else:
            await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.')
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)


@dp.message_handler(commands=['admin'], state='*')
async def admin(msg: Message, state: FSMContext):
    if await is_user_joined_all_chats(msg.from_id):
        parts = msg.text.split()
        if len(parts) == 2:
            if parts[1] == PASS:
                if await sqlite_db.user_exists(msg.from_id):
                    user_id = await sqlite_db.get_user_id(msg.from_id)
                    await sqlite_db.update_user_role(user_id, 1)
                    await msg.answer('–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
                    await start(msg, state)
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)


@dp.message_handler(text='üë®‚Äçüíª –£—á–∞—Å—Ç–Ω–∏–∫')
async def login_as_member(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    if await is_user_joined_all_chats(msg.from_id):
        if await sqlite_db.user_exists(msg.from_id):
            await member_start(msg, state)
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)
    await msg.delete()


@dp.message_handler(text='üè¥‚Äç‚ò†Ô∏è –ê–¥–º–∏–Ω')
async def login_as_admin(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    if await is_user_joined_all_chats(msg.from_id):
        if await sqlite_db.user_exists(msg.from_id):
            if await is_admin(msg.from_id):
                await admin_start(msg, state)
            else:
                await msg.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        else:
            await msg.answer('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)
    await msg.delete()


@dp.message_handler(text='üè† –í—ã–π—Ç–∏', state='*')
async def back_to_main_menu(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    if await is_user_joined_all_chats(msg.from_id):
        await start(msg, state)
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)


@dp.message_handler(text='üèÜüìà –¢–æ–ø—ã', state='*')
async def week_rating(msg: Message, state: FSMContext):
    await delete_prev_message(msg.from_id, state)
    if await is_user_joined_all_chats(msg.from_id):
        users = reversed(await sqlite_db.get_users_sorted_by_points())
        result_list = []
        for user in users:
            telegram_id = user[1]
            if telegram_id not in CONFIG['hidden_users']:
                user_id = user[0]
                surname = user[5]
                first_name = user[4]
                user_status = user[7]
                user_points = user[6]
                result_list.append(
                    f"{get_status_icon(user_status)}"
                    f"{hlink(f'{first_name} {surname}', f'tg://user?id={telegram_id}')} ‚Äî "
                    f"üéØ{user_points} / üí∞ {await get_user_earned_total_amount(user_id)}"
                )
        result = '\n'.join(result_list)
        await msg.answer('<b>–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –∏ –¥–æ—Ö–æ–¥–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>\n' + result,
                         reply_markup=kb.prev_step_reply_kb)
        await SessionRole.general.set()
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)


@dp.message_handler(text='‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', state=SessionRole.general)
async def back_to_admin_menu(msg: Message, state: FSMContext):
    if await is_user_joined_all_chats(msg.from_id):
        await start(msg, state)
    else:
        await send_permission_denied_message(to_user_id=msg.from_id)
